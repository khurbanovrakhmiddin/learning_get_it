import 'package:flutter/material.dart';import 'package:mobx/mobx.dart';import 'package:learning_get_it/models/post.dart';import 'package:learning_get_it/pages/detail/detail_home.dart';import 'package:learning_get_it/services/mapper.dart';import 'package:learning_get_it/services/net_servic.dart';part 'home_store.g.dart';class HomeStore = HomeStoreBase with _$HomeStore;abstract class HomeStoreBase with Store {  @observable  ScrollController controller = ScrollController();  @observable  bool isLoadig = false;  @observable  ObservableList<Post> list = ObservableList.of([]);  @observable  Post? selected;  @action  Future<void> getAllPost() async {    isLoadig = true;    String? res =        await Network.GET(Network.API_LIST, Network.paramsEmpty());    list = ObservableList.of(Mapper.parsePostList(res!));    isLoadig = false;  }  @action  Future<void> deletePost(String id) async {    isLoadig = true;    String? res =    await Network.DEL("${Network.API_DELETE}$id", Network.paramsEmpty      ());    list.removeWhere((element) => element.id == id);    isLoadig = false;  }  @action  Future<void> goToDetailPage(BuildContext context) async {    await Navigator.push(context,        MaterialPageRoute(builder: (context) =>  DetailPage()));  }  @action  Future<void> goToDetailPageEdit(BuildContext context,Post post)  async {    selected = post;    await Navigator.push(context,        MaterialPageRoute(builder: (context) =>  DetailPage()));   list = ObservableList.of(list);    print('pop edit');    updating();  }  @action  void updating(){     list = ObservableList.of(list);     selected = null;  }}